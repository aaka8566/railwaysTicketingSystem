/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;


import org.example.entities.Train;
import org.example.entities.User;
import org.example.services.TrainService;
import org.example.services.UserBookingService;
import org.example.util.UserServiceUtil;

import java.io.IOException;
import java.time.LocalDate;
import java.util.*;

public class App {

    public static void main(String[] args) throws IOException {
        System.out.println("Running train booking system!");
        Scanner scanner= new Scanner(System.in);
        int option=0;
        String source = "";
        String dest = "";
        UserBookingService userBookingService;
        TrainService trainService = null;
        User user;
        try{
            userBookingService=new UserBookingService();
        }catch(Exception e){
            System.out.println(e);
            return;
        }
        String loggedInUser="";

        while(option!=7){
            System.out.println("Choose option!");
            System.out.println("1) Sign up");
            System.out.println("2) Login");
            System.out.println("3) Fetch Bookings");
            System.out.println("4) Search Trains");
            System.out.println("5) Book a Seat");
            System.out.println("6) Cancel my Booking");
            System.out.println("7) Exit");
            option=scanner.nextInt();
            switch(option){
                case 1:
                    System.out.println("Enter your username to signup:");
                    if (scanner.hasNextLine()) {
                        scanner.nextLine(); // Clear the input buffer
                    }
                    String nameToSignUp=scanner.nextLine();
                    System.out.println("Enter your password to signup:");
                    String passwordToSignUp=scanner.nextLine();
                    User userToSignUp=new User(nameToSignUp,passwordToSignUp,
                            UserServiceUtil.hashPassword(passwordToSignUp),new ArrayList<>(), UUID.randomUUID().toString());
                    if(!userBookingService.isUsernameExists(nameToSignUp)){
                        userBookingService.signUp(userToSignUp);
                        System.out.println("Sign-In Successful!");
                    }else{
                        System.out.println("This username is already taken!");
                    }
                    break;
                case 2:
                    System.out.println("Enter your username to login:");
                    if (scanner.hasNextLine()) {
                        scanner.nextLine(); // Clear the input buffer
                    }
                    String nameToLogin=scanner.nextLine();
                    System.out.println("Enter your password to login:");
                    String passwordToLogin=scanner.nextLine();
                    User userToLogin=new User(nameToLogin,passwordToLogin, UserServiceUtil.hashPassword(passwordToLogin),
                            new ArrayList<>(),UUID.randomUUID().toString());
                    try{
                        if(userBookingService.loginUser(userToLogin)){
                            System.out.println("Login successful!");
                        }else{
                            System.out.println("Unsuccessful login!");
                        }
                    }catch(Exception e){
                        return;
                    }
                    break;
                case 3:
                    System.out.println("Fetch your bookings!");
                    userBookingService.fetchBooking();
                    break;
                case 4:
                    if(userBookingService.getCurrentUser()==null){
                        System.out.println("You need to login first to search for trains!!");
                        break;
                    }else{
                        System.out.println("Welcome! "+userBookingService.getCurrentUser()+" choose your source and destination!");
                    }
                    System.out.println("Type your source station:");
                    source=scanner.next();
                    System.out.println("Type your destination station:");
                    dest=scanner.next();
                    try {
                        trainService = new TrainService(userBookingService.getCurrentUser());
                        List<Train> trains = trainService.searchTrains(source, dest);

                        if (trains.isEmpty()) {
                            System.out.println("No trains available for this route! :(");
                        } else {
                            System.out.println("Available trains:");
                            int index = 1;
                            for (Train train : trains) {
                                System.out.println(index + ") " + train.getTrainName());
                                System.out.println("Route:");
                                for (String station : train.getStations()) {
                                    System.out.print(station + " -> ");
                                }
                                System.out.println();
                                index++;
                            }

                            System.out.println("Select a train by typing its number:");
                            int selectedTrainIndex = scanner.nextInt() - 1;

                            // Validate user selection
                            if (selectedTrainIndex < 0 || selectedTrainIndex >= trains.size()) {
                                System.out.println("Invalid selection! Please try again.");
                            } else {
                                Train selectedTrain = trains.get(selectedTrainIndex);
                                System.out.println("You have selected: " + selectedTrain.getTrainName());
                                trainService = new TrainService(selectedTrain,userBookingService.getCurrentUser());
                                System.out.println("Have a nice journey!");
                            }
                        }
                    } catch (Exception e) {
                        System.out.println("An error occurred while searching for trains: " + e.getMessage());
                    }
                    break;
                case 5:
                    try{
                        if(trainService == null){
                            System.out.println("You need to search and then select any train for that!");
                            break;
                        }
                        if(trainService.getCurrentUser()==null){
                            System.out.println("You need to login first dear user! :}");
                            break;
                        }
                        if(trainService.getSelectedTrain()==null){
                            System.out.println("You need to select any train for that!");
                            break;
                        }

                        System.out.println("Enter the year of travel in (yyyy format):");
                        int year = scanner.nextInt();

                        System.out.println("Enter the month of travel in (MM format) between 1-12:");
                        int month = scanner.nextInt();

                        System.out.println("Enter the date of travel in (dd format):");
                        int date = scanner.nextInt();

                        LocalDate currentDate = LocalDate.now();
                        LocalDate dateOfTravel = LocalDate.of(year,month,date);

                        System.out.println("Demo Booking!");
                        if(trainService.bookSeat(trainService.getCurrentUser(),trainService.getSelectedTrain(),source,dest,dateOfTravel)){
                            System.out.println("Booking Successful!");
                        }else{
                            System.out.println("Booking unsuccessful! :(");
                        }

                    } catch (Exception e) {
                        throw new RuntimeException(e.getMessage());
                    }
                    break;
                case 6:

                    break;
                default:
                    break;
            }

        }
    }


}
